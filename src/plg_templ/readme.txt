
     Шаблон проекта для Borland Builder C++ 6

для создания собственных модулей устройств для эмулятора-отладчика i8080.



 Описание:

В этой папке находятся файлы проекта для устройства, которое содержит 
исходный код пустого устройства. При создании собственного устройства 
на основе этого кода вам необходимо будет написать код функций инициализации,
чтения и записи из портов, окно настроек, если будет.



Пошаговая инструкция:

1. Создайте папку для проекта нового устройства в каталоге plugins
   (т.е. в той же папке, где есть папки speaker, mbr, templ)

2. Откройте проект шаблона устройства (plugins/templ/templ.bpr)
   в Builder C++ 6 и выберите команду File->Save Project As...
   Сохраните проект в только что созданую папку для нового устройства под
   новым именем, как будет называться ваше устройство (например, my_device).
   Имя файла проекта необходимо обязательно изменять, иначе результирующим 
   файлом при компиляции проекта останется templ.dll.

3. Переключитесь на main.cpp (если он уже не показывается) и выберите команду
   File->Save As...  и нажмите кнопку "Сохранить", тем самым сохранив main.cpp 
   в папку для нового проекта.

4. Переключитесь на CfgForm.cpp (меню View->Units...), выполните команду
   File->Save As... и нажмите "Сохранить".

5. Вернитесь к main.cpp и измените вначале файла строки с адресом порта устройства,
   строку с описанием и названием модуля на свои:

      char description[] = "Plugin template (templ.dll)";
      char DEVICE_NAME[] = "Plugin_template";
      int device_port = 0xc3;

6. Запрограммируйте код вашего устройства в функциях:

   reset() - сброс устройства (вызывается при сбросе эмулируемой системы)

   BYTE read(WORD por) - чтение из порта. В качестве параметра port передается адрес порта,
      по которому выполняется чтение (этот параметр полезен, когда устройство подключено
      сразу к нескольким портам, задаваемых маской).
      На выходе функция должна возвращать байт данных, прочитаных из порта.

   void write(WORD port, BYTE data) - запись в порт. Параметр port содержит адрес порта,
      по которому производится запись (аналогично функции read) а параметр data содержит байт
      данных, записываемый в порт.


   int __export DeviceInit(struct plugin_device *dev) - инициализация устройства.
      Эта функция выполняет всю работу по инициализации устройства и должна вернуть TRUE
      (не ноль) если инициализация прошла успешно и FALSE (ноль), если инициализация устройства 
      невозможна. В качестве параметра в функцию передается адрес структуры, описывающей внешнее
      устройство. Эта функция должна также заполнить некоторые поля в этой структуре:
  
      dev->descr - указатель на строку с описанием устройства (эта строка показывается в окне
         списка устройств);

      dev->mask - маска порта. Если устройство подключено к одному порту, то значение маски должно 
         быть 0xff (десятичное 255, двоичное 11111111), т.е. при проверке, относится ли адрес порта 
         к данному устройству, учитываться будут все биты. 
         Если, например, устройство использует адреса из некоторого диапазона адресов (например, старшая
         часть адреса порта в двоичном виде (старшие 6 бит) будут, например, 10110, а младшие могут быть 
         любыми, то маска должна быть 11111000 (в двоичном виде). Т.е. при сравнении запрашиваемого адреса
         с адресом порта устройства учитываться будут только старшие 5 битов, а три младших будут обращены
         в ноль.

      dev->port - адрес порта устройства.
         (если у устройства несколько адресов, задаваемых маской, то это значение
         должно содержать нули на месте маскируемых битов, т.е. для предыдущего примера
         это значение должно быть 10110000

      dev->read - указатель на функцию чтения из порта

      dev->write - указатель на функцию записи в порт

      dev->reset - указатель на функцию сброса устройства

      dev->config - указатель на функцию вызова окна настроек устройства
         (если у устройства нет окна настроек, то этому указателю можно присвоить NULL)


7. После удачной компиляции вашего кода в папке /plugins 
   должен появиться файл my_device.dll (где my_device-название, под которым вы сохранили ваш проект),
   который и содержит реализацию вашего устройства.

При запуске эмулятора ваша dll будет автоматически загружена. Если загрузка пройдет успешно
(т.е. ваша функция инициализации вернет true), ваше устройство появиться в списке устройств 
(команда меню "Настройка->Модули внешних устройств...")


2003 Sashnov Alexander
<asashnov@rambler.ru>
https://asashnov.github.io/
